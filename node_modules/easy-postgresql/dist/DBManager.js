var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const DB = require("./db");
const prompt = require("prompt-sync")({ sigint: true });
class DBManager {
    static createSchema(schemaName = DB.database) {
        return __awaiter(this, void 0, void 0, function* () {
            const up = `CREATE SCHEMA IF NOT EXISTS ${schemaName};`;
            const down = `DROP SCHEMA IF EXISTS ${schemaName} CASCADE;`;
            yield DB.pool.query(up);
            return { up, down };
        });
    }
    static dropSchema(schemaName = DB.database) {
        return __awaiter(this, void 0, void 0, function* () {
            const up = `DROP SCHEMA IF EXISTS ${schemaName} CASCADE;`;
            const down = `CREATE SCHEMA IF NOT EXISTS ${schemaName};`;
            yield DB.pool.query(up);
            return { up, down };
        });
    }
    static dropTable(model) {
        return __awaiter(this, void 0, void 0, function* () {
            const up = `DROP TABLE IF EXISTS ${DB.database}.${model.table} CASCADE;`;
            const down = `CREATE TABLE IF NOT EXISTS ${DB.database}.${model.table} (
            ${DBManager.modelColumnstoSql(model)}
        );`;
            yield DB.pool.query(up);
            return { up, down };
        });
    }
    static createTable(model) {
        return __awaiter(this, void 0, void 0, function* () {
            const up = `CREATE TABLE IF NOT EXISTS ${DB.database}.${model.table} (
            ${DBManager.modelColumnstoSql(model)}
        );`;
            const down = `DROP TABLE IF EXISTS ${DB.database}.${model.table} CASCADE;`;
            yield DB.pool.query(up);
            return { up, down };
        });
    }
    static modelColumnstoSql(model) {
        return Object.values(model.columns || {})
            .map((column) => DBManager.modelColumnToSQL(column))
            .join(",\n");
    }
    static modelColumnToSQL(column) {
        var _a, _b;
        return `${column.column} ${column.type} ${((_a = column.columnConfig) === null || _a === void 0 ? void 0 : _a.length) ? `(${(_b = column.columnConfig) === null || _b === void 0 ? void 0 : _b.length})` : ""} ${DBManager.modelColumnConstraints(column)}`;
    }
    static modelColumnConstraints(column) {
        const { columnConfig } = column;
        let sql = "";
        if (columnConfig.primary) {
            sql += ` PRIMARY KEY `;
        }
        if (columnConfig.unique) {
            if (Array.isArray(columnConfig.unique)) {
                sql += ` UNIQUE ${columnConfig.unique.join(",")} `;
            }
            else {
                sql += ` UNIQUE `;
            }
        }
        if (!columnConfig.nullable) {
            sql += " NOT NULL ";
        }
        if (typeof columnConfig.defaultValue !== "undefined") {
            sql += ` DEFAULT  ${columnConfig.defaultValue} `;
            // if (columnConfig.type === "uuid") {
            //   sql += ` DEFAULT  ${columnConfig.defaultValue} `;
            // } else if (
            //   ["now()", "current_timestamp"].indexOf(
            //     columnConfig.defaultValue?.toLowerCase()
            //   ) !== -1
            // ) {
            //   sql += ` DEFAULT  ${columnConfig.defaultValue} `;
            // } else {
            //   sql += ` DEFAULT '${columnConfig.defaultValue}'::${column.type} `;
            // }
        }
        if (columnConfig.check) {
            if (Array.isArray(columnConfig.check)) {
                sql += ` CHECK ${columnConfig.check.join(",")}`;
            }
            else {
                ` CHECK ${columnConfig.check}`;
            }
        }
        return sql;
    }
    static createIndexes(model) {
        var _a, _b, _c;
        let up = ``;
        const primaryIndexes = Object.entries(((_a = model === null || model === void 0 ? void 0 : model.indexes) === null || _a === void 0 ? void 0 : _a.primary) || {});
        const foreignIndexes = Object.entries(((_b = model === null || model === void 0 ? void 0 : model.indexes) === null || _b === void 0 ? void 0 : _b.foreign) || {});
        const uniqueIndexes = Object.entries(((_c = model === null || model === void 0 ? void 0 : model.indexes) === null || _c === void 0 ? void 0 : _c.unique) || {});
        switch (type.toLowerCase()) {
            case "primary":
                up = `ALTER TABLE ${DB.database}.${model.table} ALTER column ${model} `;
        }
    }
    static exec(sql, args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            yield DB.pool.query(sql, args);
        });
    }
    static runBash(depth = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            if (depth === 0) {
                console.log("New Postgres CLI: ");
            }
            const sql = prompt("Enter SQL (press 1 to exit): ");
            if (sql.trim() === "1") {
                console.log("BYE");
                process.exit(0);
            }
            yield DBManager.exec(sql);
            DBManager.runBash(depth + 1);
        });
    }
}
module.exports = DBManager;
