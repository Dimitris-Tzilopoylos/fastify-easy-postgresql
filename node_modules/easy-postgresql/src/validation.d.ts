export = ValidationService;
declare class ValidationService {
    static validateNumber({ value, min, max }: {
        value: any;
        min?: number;
        max?: number;
    }): boolean;
    static validateString({ value, min, max, noWhiteSpace, }: {
        value: any;
        min?: number;
        max?: number;
        noWhiteSpace?: boolean;
    }): boolean;
    static isIntOrStringInt(value: any): boolean;
    static isOneOf({ value, options }: {
        value: any;
        options?: any[];
    }): boolean;
    static isEveryOf({ value, options }: {
        value: any;
        options?: any[];
    }): boolean;
    static isNumber(value: any): boolean;
    static isString(value: any): boolean;
    static isUndefined(value: any): boolean;
    static isFalsy(value: any): boolean;
    static isNull(value: any): boolean;
    static isNullOrUndefined(value: any): boolean;
    static isNullOrUndefinedOrEmpty(value: any): boolean;
    static isObject(value: any): boolean;
    static isBoolean(value: any): boolean;
    static validateEmail(email: any): RegExpMatchArray;
    static validateBody(data: any, validators: any, parentData: any): any;
    static isNotEmptyArray(fieldSet: any): boolean;
    static validateUniqueFieldSet(fieldSet: any, getValue?: (x: any) => any): boolean;
    static isArrayOfType(fieldSet: any, type: any): boolean;
    static isFunction(value: any): boolean;
    static isDomain(value: any): boolean;
    static throwAsyncResult(error: any, result: any): void;
}
