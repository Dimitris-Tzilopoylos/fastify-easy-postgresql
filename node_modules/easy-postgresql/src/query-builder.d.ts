declare class QueryBuilder {
    constructor(schema?: string);
    query: string;
    queryConfig: any[];
    schema: string;
    schemaStr: string;
    argsIndex: number;
    qArgs: any[];
    bindingOperatorToSQL: {
        and: string;
        or: string;
    };
    select(columns?: any[]): QueryBuilder;
    from(table: any, alias: any): QueryBuilder;
    where(...args: any[]): QueryBuilder;
    column(name: any, alias: any): {
        sql: string;
        args: any;
        $$$isColumn: boolean;
    };
    eq(...args: any[]): {
        sql: string;
        resolved: boolean;
    };
    neq(...args: any[]): {
        sql: string;
        resolved: boolean;
    };
    gt(...args: any[]): {
        sql: string;
        resolved: boolean;
    };
    gte(...args: any[]): {
        sql: string;
        resolved: boolean;
    };
    lt(...args: any[]): {
        sql: string;
        resolved: boolean;
    };
    lte(...args: any[]): {
        sql: string;
        resolved: boolean;
    };
    and(...args: any[]): {
        type: string;
        sql: string;
        args: any[];
    };
    or(...args: any[]): {
        type: string;
        sql: string;
        args: any[];
    };
    resolveOperator(input: any, funcName: any): any;
    isBindingOperator(func: any): boolean;
    update(tableName: any): QueryBuilder;
    set(...args: any[]): QueryBuilder;
    resolveColumnName(x: any, alias: any): string;
}
declare const qb: QueryBuilder;
declare const y: any;
